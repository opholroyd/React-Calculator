{"version":3,"sources":["layout/Calculator/Screen/ResultScreen/ResultScreen.js","layout/Calculator/Calculator.js","layout/Calculator/Keypad/KeypadRow/KeypadRow.js","components/Button/Button.js","components/Button/LargeButton/LargeButton.js","layout/Calculator/Keypad/Keypad.js","layout/Calculator/Screen/ComputationScreen/ComputationScreen.js","layout/Calculator/Screen/Screen.js","App.js","serviceWorker.js","index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","resultScreen","props","a","createElement","className","children","Calculator","state","equation","result","onButtonPress","event","_this","pressedButton","target","innerHTML","clear","indexOf","evalResult","eval","Number","isInteger","toFixed","setState","error","alert","trim","substr","length","this","react__WEBPACK_IMPORTED_MODULE_5___default","_Screen_Screen__WEBPACK_IMPORTED_MODULE_6__","_Keypad_Keypad__WEBPACK_IMPORTED_MODULE_7__","React","Component","keypadRow","react_default","button","classes","type","push","join","onClick","largeButton","Button","Object","assign","keypad","KeypadRow","LargeButton","computationScreen","screen","ResultScreen","ComputationScreen","app","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.76292308.chunk.js","sourcesContent":["import React from 'react';\n\nconst resultScreen = (props) => (\n    <div className=\"result-screen\">\n        {props.children}\n    </div>\n);\n\nexport default resultScreen;","import React from 'react';\n\nimport Screen from './Screen/Screen';\nimport Keypad from './Keypad/Keypad';\n\nclass Calculator extends React.Component {\n    state = {\n        equation: '',\n        result: 0\n    }\n\n    onButtonPress = event => {\n        let equation = this.state.equation;\n        const pressedButton = event.target.innerHTML;\n\n        if (pressedButton === 'C') return this.clear();\n        else if ((pressedButton >= '0' && pressedButton <= '9') || pressedButton === '.') equation += pressedButton;\n        else if (['+', '-', '*', '/', '%'].indexOf(pressedButton) !== -1) equation += ' ' + pressedButton + ' ';\n        else if (pressedButton === '=') {\n            try {\n                const evalResult = eval(equation);\n                const result = Number.isInteger(evalResult)? evalResult : evalResult.toFixed(2);\n                this.setState({result});\n            } catch (error) {\n                alert('Invalid Mathematical Equation');\n            }\n        }\n        else {\n            equation = equation.trim();\n            equation = equation.substr(0, equation.length - 1);\n        }\n                \n        this.setState({equation: equation});\n    }\n\n    clear() {\n        this.setState({equation: '', result: 0});\n    }\n\n    render() {\n        return (\n            <main className=\"calculator\">\n                <Screen equation={this.state.equation} result={this.state.result} />\n                <Keypad onButtonPress={this.onButtonPress} />\n            </main>\n        );\n    }\n}\n\nexport default Calculator;","import React from 'react';\n\nconst keypadRow = (props) => (\n    <div className=\"keypad__row\">\n        {props.children}\n    </div>\n);\n\nexport default keypadRow;","\n    \nimport React from 'react';\n\nconst button = (props) => {\n    const classes = ['btn'];\n\n    if (typeof props !== 'undefined'\n        && typeof props.type !== 'undefined')\n        classes.push('btn--' + props.type);\n\n    return (\n        <button className={classes.join(' ')} onClick={props.onButtonPress}>\n            {props.children}\n        </button>\n    );\n};\n\nexport default button;","\n    \nimport React from 'react';\n\nimport Button from '../Button';\n\nconst largeButton = (props) => <Button type='large' {...props} />;\n\nexport default largeButton;","import React from 'react';\n\nimport KeypadRow from './KeypadRow/KeypadRow';\nimport Button from '../../../components/Button/Button';\nimport LargeButton from '../../../components/Button/LargeButton/LargeButton';\n\nconst keypad = props => (\n    <section className=\"keypad\">\n        {/* row #1 */}\n        <KeypadRow>\n            <Button type=\"primary\" onButtonPress={props.onButtonPress}>C</Button>\n            <Button type=\"primary\" onButtonPress={props.onButtonPress}>&larr;</Button>\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>%</Button>\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>/</Button>\n        </KeypadRow>\n\n        {/* row #2 */}\n        <KeypadRow>\n            <Button onButtonPress={props.onButtonPress}>7</Button>\n            <Button onButtonPress={props.onButtonPress}>8</Button>\n            <Button onButtonPress={props.onButtonPress}>9</Button>\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>*</Button>\n        </KeypadRow>\n\n        {/* row #3 */}\n        <KeypadRow>\n            <Button onButtonPress={props.onButtonPress}>4</Button>\n            <Button onButtonPress={props.onButtonPress}>5</Button>\n            <Button onButtonPress={props.onButtonPress}>6</Button>\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>-</Button>\n        </KeypadRow>\n\n        {/* row #4 */}\n        <KeypadRow>\n            <Button onButtonPress={props.onButtonPress}>1</Button>\n            <Button onButtonPress={props.onButtonPress}>2</Button>\n            <Button onButtonPress={props.onButtonPress}>3</Button>\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>+</Button>\n        </KeypadRow>\n\n        {/* row #5 */}\n        <KeypadRow>\n            <Button onButtonPress={props.onButtonPress}>0</Button>\n            <Button onButtonPress={props.onButtonPress}>.</Button>\n            <LargeButton onButtonPress={props.onButtonPress}>=</LargeButton>\n        </KeypadRow>\n    </section>\n);\n\nexport default keypad;\n","import React from 'react';\n\nconst computationScreen = (props) => (\n    <div className=\"computation-screen\">\n        {props.children}\n    </div>\n);\n\nexport default computationScreen;","import React from 'react';\n\nimport ResultScreen from './ResultScreen/ResultScreen';\nimport ComputationScreen from './ComputationScreen/ComputationScreen';\n\nconst screen = (props) => (\n    <section className=\"screen\">\n        <ResultScreen>{props.result}</ResultScreen>\n        <ComputationScreen>{props.equation}</ComputationScreen>\n    </section>\n);\n\nexport default screen;","import React, { Component } from 'react';\nimport './App.css';\nimport './style.css';\nimport Calculator from './layout/Calculator/Calculator';\nimport resultScreen from './layout/Calculator/Screen/ResultScreen/ResultScreen';\n\n\nconst app = () => (\n  <div className=\"app\">\n    <Calculator />\n  </div>\n);\n\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}